@{
    Layout = "~/Views/Shared/_LayoutDemo.cshtml";
}
@{
    ViewBag.Title = "DataGrid Demo ";
}
@Html.AntiForgeryToken()

@section CssImport {
    <style type="text/css">
        .productTableWrap {
            height: calc(100% - 40px);
            width: 100%;
        }

        .productTableContainer {
            overflow: auto !important;
        }

        .productTableHeader {
        }

        .orderDetailTableWrap {
            max-height: 180px;
            width: 100%;
        }

        table.ria-data-table td.number-display {
            color: blue;
            font-weight: bold;
        }

        table.ria-data-table td.number-edit > input[type="text"] {
            color: black;
        }

        .name-display {
            color: blue;
            font-weight: bold;
        }

        .name-edit > input[type="text"] {
            color: black;
        }

        .name-edit > textarea {
            color: black;
        }

        .listbox-edit select {
            width: 75%;
        }

        .ria-data-table td.weightCell {
            text-align: right;
        }

        .ria-data-table td.dateCell {
            text-align: right;
        }

        .ria-data-table td.activeCell {
            text-align: center;
        }

        .weightCol {
            font-weight: bolder;
        }

        .rowInactive > td.ria-data-cell {
            color: gray;
            text-decoration: line-through;
        }

        table.ria-data-table tr:nth-child(even) {
            background-color: #ECF2F6;
        }

        .ui-datepicker select.ui-datepicker-month,
        .ui-datepicker select.ui-datepicker-year {
            min-height: 28px;
        }

        .ui-datepicker select.ui-datepicker-month {
            margin-right: 3px;
            width: 80px;
        }

        .gray-bgc {
            background-color: #ECF2F6;
        }

        .white-bgc {
            background-color: #FFFFFF;
        }


        div.someClass {
            color: gray;
        }

        div.bold span {
            font-weight: bold;
            font-size: larger;
        }

        div.bold {
            color: black;
        }

            div.bold.lsize {
                color: red;
            }

            div.bold.msize {
                color: green;
            }

            div.bold.ssize {
                color: blue;
            }

            div.bold.nsize {
                color: darkgoldenrod;
            }
    </style>
}

@section JSStaticImport {
}

@section JSDynamicImport {
    <environment include="Development">
        <script src="~/js/demo/gridDemo/main.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/demo/gridDemo/main.min.js" asp-append-version="true"></script>
    </environment>

    <script type="text/javascript">
    require(["gridDemo/main", "jriapp_ui", "jriapp_ru"],
        function (DEMO, UI, LANG) {
            $("#loading").fadeIn();

            var mainOptions = {
                service_url: null,
                permissionInfo: null,
                upload_thumb_url: null,
                templates_url: null,
                productEditTemplate_url: null,
                modelData: null,
                categoryData: null,
                sse_url: null,
                sse_clientID: null
            };

            (function (ops) {
                @*
                ops.modelData =  @await Component.InvokeAsync("ProductModel");
                ops.categoryData = @await Component.InvokeAsync("ProductCategory");
                *@

                ops.service_url = '@Url.RouteUrl("default", new {controller = "RIAppDemoServiceEF", action = ""})';
                ops.permissionInfo = @await Component.InvokeAsync("Permissions");
                ops.upload_thumb_url = '@Url.Action("ThumbnailUpload", "Upload")';
                ops.templates_url = '@Url.Action("Download", "Templates", new {name = "DataGridDemo"})';
                ops.productEditTemplate_url = '@Url.Action("Download", "Templates", new { name = "productEditTemplate"})';
                //used to access SignalR hub
                ops.sse_url = '/quotes';

                @{
                    var client_id = Guid.NewGuid().ToString();
                }
            })(mainOptions);

            DEMO.start(mainOptions).then(function () {
                $("#demoContent").animate({ opacity: 1 }, 1000);
                $("#loading").fadeOut(1000);
            }, function (err) {
                $("#loading").fadeOut(1000);
            });
        });
    </script>
}

<h2 class="ex8">@ViewBag.Title</h2>

<header id="title" class="text-left">
    <a id="expander" class="align-baseline btn btn-sm btn-outline-light" data-bind="this.command,to=expanderCommand,mode=OneWay,source=headerVM" data-view="expander"></a>
    <span class="ml-1 align-baseline">Filter</span>
    <span class="ml-1 align-baseline" data-bind="this.html,to=sseMessage,mode=OneWay,source=app"></span>
</header>

<script id="prodMCatDataBind" type="text/x-options">
    {this.selectedValue,to=filter.parentCategoryId,mode=TwoWay}
    {this.textProvider,to=optionTextProvider}
    {this.stateProvider,to=optionStateProvider}
</script>

<script id="salesDateOptions" type="text/x-options">
    datepicker: { showOn:button,
    yearRange:'-15:c',
    changeMonth: true,
    changeYear:true,
    yearRange:'1998:2005',
    minDate:date(1998-06-01,YYYY-MM-DD),
    maxDate:date(20050707),
    test: inject('testsvc', 'param1''s value, test', {x: 123, dt1: date(startofmonth), dt2: date(endofweek) }, 100)
    }
</script>

<form id="demoHeader" class="container-fluid mx-0" data-bind="this.dataContext,source=productVM" data-view="dataform">
    <div class="form-group-sm row py-2 px-2 text-left my-0" style="font-size:0.85rem;">
        <div class="col-2">
            <label for="prodNum1">Product Number:</label>
            <input type="text" class="form-control-sm w-75" id="prodNum1" placeholder="Product number"
                   data-bind-1="this.value,to=filter.prodNumber,mode=TwoWay"
                   data-bind-2="this.toolTip,to=filter.searchTextToolTip">
        </div>
        <div class="col-3 pl-0">
            <label for="prodName1">Product Name:</label>
            <input type="text" class="form-control-sm w-100" id="prodName1" placeholder="Name"
                   data-bind-1="this.value,to=name,mode=TwoWay"
                   data-bind-2="this.toolTip,to=searchTextToolTip" />
        </div>
        <div class="col-2 pl-0">
            <label for="prodMCat">Main Category:</label>
            @*
                Providing the datasource through the options - not using databinding
                bind(ParentCategories,productVM.filter) takes two arguments - the first is the path, the second is the source
                the second parameter is optional. Their semantics is the same as in the usual databinding.
                We could write it without the source argument, like that -
                data-view-options="valuePath=ProductCategoryId,textPath=Name,dataSource=bind(filter.ParentCategories)"></select>
            *@
            <select id="prodMCat" size="1" class="form-control-sm w-100"
                    data-bind="get(prodMCatDataBind)"
                    data-view-options="valuePath=ProductCategoryId,textPath=Name,dataSource=bind(ParentCategories,productVM.filter)"></select>
        </div>
        <div class="col-2 pl-0">
            <label for="prodSCat">Sub Category:</label>
            <select id="prodSCat" size="1" class="form-control-sm w-100"
                    data-bind-1="this.dataSource,to=filter.ChildCategories"
                    data-bind-2="this.selectedValue,to=filter.childCategoryId,mode=TwoWay"
                    data-bind-3="this.selectedItem,to=filter.selectedCategory,mode=TwoWay"
                    data-bind-4="this.toolTip,to=filter.selectedCategory.Name"
                    data-bind-5="this.textProvider,to=optionTextProvider"
                    data-bind-6="this.stateProvider,to=optionStateProvider"
                    data-view-options="valuePath=ProductCategoryId,textPath=Name"></select>
        </div>
        <div class="col-3 pl-0">
            <label for="prodMod">Model:</label>
            <select id="prodMod" size="1" class="form-control-sm w-100"
                    data-bind-1="this.dataSource,to=filter.ProductModels"
                    data-bind-2="this.selectedValue,to=filter.modelId,mode=TwoWay"
                    data-bind-3="this.toolTip,to=filter.selectedModel.Name"
                    data-bind-4="this.selectedItem,to=filter.selectedModel,mode=TwoWay"
                    data-bind-5="this.textProvider,to=optionTextProvider"
                    data-bind-6="this.stateProvider,to=optionStateProvider"
                    data-view-options="valuePath=ProductModelId,textPath=Name"></select>
        </div>
    </div>
    <div class="form-group row py-2 px-2 text-left my-0">
        <div class="col-2">
            <label for="sizes">Size:</label>
            <select id="sizes" size="1" class="form-control-sm w-100"
                    data-bind-1="this.dataSource,to=filter.sizes"
                    data-bind-2="this.selectedValue,to=filter.size,mode=TwoWay"
                    data-view-options="tip:'Choose the right size',valuePath=key,textPath=val"></select>
        </div>
        <div class="col-2">
            <label for="saleStart1">Sales Start Date Begin:</label>
            <input type="text" id="saleStart1" class="form-control-sm w-75" placeholder="DD.MM.YYYY"
                   data-bind="this.value,to=filter.saleStart1,mode=TwoWay,converter=dateConverter"
                   data-view="datepicker"
                   data-view-options="get(salesDateOptions)" />
        </div>
        <div class="col-2 mr-auto">
            <label for="saleStart2">Sales End Date:</label>
            <input type="text" id="saleStart2" class="form-control-sm w-75" placeholder="DD.MM.YYYY"
                   data-bind="this.value,to=filter.saleStart2,mode=TwoWay,converter=dateConverter"
                   data-view="datepicker"
                   data-view-options="get(salesDateOptions)" />
        </div>
    </div>
    <!--this nested dataform is only to test how the dataform nesting is working!!! it is not needed here, really.-->
    <div class="p-2 text-left my-1" data-bind="this.dataContext" data-view="dataform">
        <a id="btn_filter" class="btn btn-info btn-sm" data-bind="this.command,to=loadCommand"><i class="fas fa-search"></i>&nbsp;Filter</a>
        <a id="btn_reset" class="btn btn-info btn-sm" data-bind="this.command,to=filter.resetCommand"><i class="fas fa-retweet"></i>&nbsp;Reset</a>
        <a class="btn btn-info btn-sm" data-bind="this.command,to=openHubCommand,source=app" data-view-options="tip:'Starts a signalR hub which returns quotes!'"><i class="fas fa-link"></i>&nbsp;Connect Hub</a>
        <a class="btn btn-info btn-sm" data-bind="this.command,to=closeHubCommand,source=app"><i class="fas fa-unlink"></i>&nbsp;Close Hub</a>
    </div>
</form>

<script id="gridProductsOptions" type="text/x-options">
    resizeMode:overflow,
    wrapCss:productTableWrap,
    containerCss:productTableContainer,
    headerCss:productTableHeader,
    rowStateField:IsActive,
    isHandleAddNew:true,
    isCanEdit:true,
    editor:bind(dialogOptions,productVM),
    details:{templateID:productDetailsTemplate}
</script>

<div id="demoContent" class="container-fluid" style="opacity:0;" data-bind="this.isBusy,to=dbContext.isBusy" data-view="busy">
    <div class="row" style="height: 85%;">
        <table data-name="gridProducts" data-bind1="this.dataSource,to=dbSet,source=productVM"
               data-bind2="this.grid,to=grid,mode=BackWay,source=productVM"
               data-bind3="this.stateProvider,to=rowStateProvider,source=productVM"
               data-view="resizable_grid"
               data-view-options="get(gridProductsOptions)">
            <thead>
                <tr>
                    <th data-column="width:35px,type:row_expander,tip='Row expander'"></th>
                    <th data-column="width:50px,type:row_actions,tip='Row actions'"></th>
                    <th data-column="width:40px,type:row_selector,tip='Column selector'"></th>
                    <th data-column="width:100px,sortable:false,templateID:productNumberTemplate,tip='Product number column implemented using template!!!'" data-content="fieldName:ProductNumber,css:{readCss:'number-display',editCss:'number-edit'}"></th>
                    <th data-column="width:25%,sortable:true,title:Name,tip='Product name'" data-content="fieldName:Name"></th>
                    <th data-column="width:90px,title:'Weight',sortable:true,rowCellCss:weightCell,colCellCss:weightCol,tip='Example of a tooltip in the datagrid column''s header'" data-content="fieldName:Weight"></th>
                    <th data-column="width:15%,title=CategoryID,sortable:true,sortMemberName=ProductCategoryId" data-content="fieldName=ProductCategoryId,name:lookup,options:{dataSource=dbContext.dbSets.ProductCategory,valuePath=ProductCategoryId,textPath=Name}"></th>
                    <th data-column="width:100px,sortable:true,rowCellCss:dateCell,title='SellStartDate',tip='Start of the sales'" data-content="fieldName=SellStartDate"></th>
                    <th data-column="width:100px,sortable:true,rowCellCss:dateCell,title='SellEndDate',tip='End of the sales'" data-content="fieldName=SellEndDate"></th>
                    <th data-column="width:90px,sortable:true,rowCellCss:activeCell,title='IsActive',sortMemberName=SellEndDate" data-content="fieldName=IsActive"></th>
                    <th data-column="width:10%,title=Size,sortable:true,sortMemberName=Size" data-content="template={readID=sizeDisplayTemplate}"></th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <div class="row border-0 mt-3" style="height: 15%;">
        <!--pager-->
        <div class="col-10 pl-0" data-bind-1="this.dataSource,to=dbSet,source=productVM"
             @*when the pager is selected than the datagrid gets keydown and keyup events*@
             data-bind-2="this.parentControl,to=grid,source=productVM"
             data-view="pager"
             data-view-options="sliderSize:5,showTip:false,showInfo:true">
        </div>
        <div class="col-2 text-right">
            <button class="btn btn-info btn-sm" data-bind="this.command,to=addNewCommand,mode=OneWay,source=productVM"><i class="icon-plus"></i>&nbsp;New Product</button>
        </div>
    </div>
</div>

<!--
    template for the size grid's cell - it is picked automatically by the engine
    it also shows how to bind to elementview's "classes" property
-->
<script id="sizeDisplayTemplate" type="text/x-template">
    <!--I added someClass to show that it is not deleted while classes are manipulated through the databinding-->
    <div class="someClass" data-bind-1="this.classes[*],to=Size,converter=sizeConverter"
         data-bind-2="this.classes[bold],to=IsActive">
        <span class="align-baseline text-secondary">Size:</span><span class="align-baseline ml-3" data-bind="this.value,to=Size"></span>
    </div>
</script>

<!--a template inside data grid's column-->
<script id="productNumberTemplate" type="text/x-template">
    <div class="m-0 p-0 border border-secondary rounded text-center" style="height:90%; width:95%;">
        <a class="text-white align-middle" data-name="Product Number Column"
           data-bind1="this.command,to=columnCommand,source=productVM"
           data-bind2="this.commandParam,to=currentItem,source=productVM"
           data-view-options="stopPropagation=true">Product #</a>
    </div>
</script>

@await Html.PartialAsync("_WaitLoad")
