@{
    Layout = "~/Views/Shared/_LayoutDemo.cshtml";
}
@{
    ViewBag.Title = "Data Binding Demo";
}

@section CssImport
{
    <link href="~/js/jquery/external/MonthPicker.min.css" rel="stylesheet" />

    <style type="text/css">
        #demoContent {
            height: 600px;
            overflow: visible;
            position: relative;
            vertical-align: top;
        }

        /* custom selector for testing: assigned when the button is disabled */
        a.testClass, a.testClass:hover, a.testClass:focus {
          opacity: .65;
          color: #fff;
          background-color: #17a2b8;
          border-color: #17a2b8;
        }

        a.btn {
            min-width: 11rem;
            min-height: 2.15rem;
        }

        .month-picker-title {
            color: #aaa;
        }
        
        .ui-button-icon.ui-icon {
            transform: scale(1.5);
            margin-top: -0.75em;
            margin-left: -0.5em;
        }

        label {
            color: blue;
        }
    </style>
}

@section JSStaticImport
{
    <script src="~/js/jquery/external/MonthPicker.min.js"></script>
}

@section JSDynamicImport {
    <script type="text/javascript">
        require(["jriapp", "bindingsDemo"],
            function (RIAPP, DEMO) {
                //create and start application here
                RIAPP.bootstrap.startApp(function () {
                    return new DEMO.DemoApplication(DEMO.appOptions);
                },
                    function (app) {
                        //just an example of how to create the data binding in code
                        //store the reference to the Binding's instance - in case we need to destroy it when we want
                        //BUT - even without storing the reference it can not be removed by garbage collector, because it subscribed to property changes
                        //in the TestObject (and TestObject's instance hold references to the subscriber)
                        //P.S.- we really don't need to use data binding here, because we can do the same logic inside the TestObject's code
                        //but can be used for testing purposes
                        app.UC.createdBinding = app.bind({
                            sourcePath: 'testProperty1',
                            targetPath: 'testProperty2',
                            source: app.testObject,
                            mode: 'OneWay',
                            target: app.testObject,
                            converter: app.getConverter('uppercaseConverter'),
                            param: null
                        });
                    }).then(function () {
                        $("#demoContent").animate({ opacity: 1 }, 1000);
                    });
            });

        $(document).ready(function ($) {
            var $examples = $('script[type="text/x-example"]');
            $examples.each(function (index, el) {
                var $script = $(this);
                var $pre = $("<pre></pre>");
                $pre.text($script.html());
                $script.replaceWith($pre);
            });
        });
    </script>
}

<h2 class="ex8 mb-3">@ViewBag.Title</h2>

<!--using dataform is convenient because it set datacontext scope for all its content-->
<div id="demoContent" class="container-fluid mx-0 px-0" style="opacity:0;">
    <div class="form-group-sm">
        <h4 class="text-primary text-capitalize">HTML elements values are binded to the TestObject properties</h4>
        <div class="ml-0 form-row mb-2">
            <label class="col-sm-1 col-form-label-sm" for="testbind1">testProperty1:</label>
            <div class="col-sm-11">
                <!--without the updateOnKeyUp option, value is updated only when textbox loses the focus-->
                <input id="testbind1" type="text" class="form-control-sm" data-bind="this.value,to=testProperty1,mode=TwoWay,source=testObject"
                       data-view-options="updateOnKeyUp=true,tip='TwoWay databinding means that the data passes in both directions: from the source to the target and otherwise. The default is OneWay databinding (from source to target)'" style="width: 250px" />
                <span class="ml-3 text-success col-form-label-sm" data-bind="this.value,to=testProperty2,source=testObject"></span>
            </div>
            <small class="form-text text-muted ml-2">P.S. - Bound to the element view's value property with an updateOnKeyUp option. While editing the buttons below will get disabled when the text length < 4</small>
        </div>
        <div class="ml-0 form-row mb-2">
            <label class="col-sm-1 col-form-label-sm" for="testbind2">testProperty3:</label>
            <div class="col-sm-11">
                <input id="testbind2" type="text" class="form-control-sm" data-bind="this.value,to=testProperty3,mode=BackWay,source=testObject"
                       data-view-options="tip='BackWay databinding passes the data only from the target (the textbox here) to the source (testObject here). It does not listen for source changes.'"
                       style="width: 250px;" />
                <span class="ml-2 text-success col-form-label-sm" data-bind="this.value,to=testProperty3,source=testObject"></span>
            </div>
            <small class="form-text text-muted ml-2">P.S. - Bound using a BackWay binding option and without an updateOnKeyUp option</small>
        </div>
        <div class="ml-0 form-row mb-2">
            <label class="col-sm-1 col-form-label-sm" for="months">Months:</label>
            <select size="1" id="months" class="form-control-sm col-sm-4"
                    data-bind-1="this.dataSource,to=months,source=testObject"
                    data-bind-2="this.selectedValue,to=month,mode=TwoWay,source=testObject"
                    data-view-options="valuePath=key,textPath=val,emptyOptionText='Select month ...'"></select>
            <span class="text-success col-sm-1 col-form-label-sm" data-bind="this.value,to=month,source=testObject"></span>

            <div class="col-sm-4 mr-auto">
                <div class="d-inline-block" style="width:10.5rem;">
                    <div class="input-group" style="width:11rem;">
                        <input class="form-control-sm" style="width:8rem;" type="text" data-view="monthpicker" data-view-options="tip='the selected Month and Year is converted to the date type using a converter'"
                               data-bind="this.value,to=yearmonth,mode=TwoWay,source=testObject,converter=yearmonthConverter,param='MM/YYYY'"
                               placeholder="MM/YYYY" />
                    </div>
                </div>
                <span class="text-success col-form-label-sm" data-bind="this.value,to=yearmonth,source=testObject,converter=yearmonthConverter,param='MM/YYYY'"></span>
            </div>
        </div>
        <div class="mb-2 ml-0 form-row">
            <label class="col-sm-1 col-form-label">Formats:</label>
            <select size="1" class="form-control-sm col-sm-4" data-bind-1="this.dataSource,to=formats,source=testObject"
                    data-bind-2="this.selectedValue,to=format,mode=TwoWay,source=testObject"
                    data-bind-3="this.selectedItem,to=formatItem,mode=BackWay,source=testObject"
                    data-view-options="valuePath=key,textPath=val,emptyOptionText='Select format ...'"></select>
            <div class="col-sm-4 mr-auto">
                <span class="ml-2 text-success col-form-label-sm" data-bind="this.value,to=format,source=testObject"></span>:<span class="ml-2 text-success col-form-label-sm" data-bind="this.value,to=formatItem.val,source=testObject"></span>
            </div>
        </div>
        <div class="mb-2 ml-1">
            <label class="col-form-label">boolProperty:</label>
            <span class="text-success" data-bind="this.value,to=boolProperty,source=testObject"></span>
            <label class="d-block ria-checkbox">
                <input type="checkbox" class="ria-checkbox" data-bind="this.checked,to=boolProperty,mode=TwoWay,source=testObject" />
                <span></span>
            </label>
        </div>
        <div class="mb-2 ml-1">
            <label class="col-form-label">boolProperty ThreeState:</label>
            <span class="text-success" data-bind="this.value,to=boolProperty,source=testObject"></span>
            <label class="d-block ria-checkbox">
                <input type="checkbox" class="ria-checkbox" data-bind="this.checked,to=boolProperty,mode=TwoWay,source=testObject" data-view="threeState" />
                <span></span>
            </label>
        </div>
    </div>
    <div class="mb-2">
        <h4 class="text-primary">The button uses the default <strong>AnchorElView</strong>!</h4>
        <script type="text/x-example">
            <a class="btn btn-sm btn-info my-2 mx-0" role="button"
               data-bind-1="this.command,to=testCommand,source=testObject"
               data-bind-2="this.toolTip,to=testToolTip,source=testObject">Test command 1</a>
        </script>
        <a class="btn btn-sm btn-info my-2 mx-0" role="button"
           data-bind-1="this.command,to=testCommand,source=testObject"
           data-bind-2="this.toolTip,to=testToolTip,source=testObject">Test command 1</a>
    </div>
    <div class="mb-2">
        <h4 class="text-primary">The button uses a Generic <strong>BaseElView</strong> which can be used with any HTML element!</h4>
        <script type="text/x-example">
            <a class="btn btn-sm btn-info my-2 mx-0" role="button"
               data-bind-1="this.events[click],to=testCommand,source=testObject"
               data-bind-2="this.toolTip,to=testToolTip,source=testObject"
               data-bind-3="this.props[text],to=testProperty1,source=testObject"
               data-bind-4="this.classes[testClass],to=isEnabled,source=testObject,converter=notConverter"
               data-view="generic">Test command 2</a>
        </script>
        <a class="btn btn-sm btn-info my-2 mx-0" role="button"
           data-bind-1="this.events[click],to=testCommand,source=testObject"
           data-bind-2="this.toolTip,to=testToolTip,source=testObject"
           data-bind-3="this.props[text],to=testProperty1,source=testObject"
           data-bind-4="this.classes[testClass],to=isEnabled,source=testObject,converter=notConverter"
           data-view="generic">Test command 2</a>
    </div>
    <div class="mb-3">
        <h4 class="text-primary">Using command parameter!</h4>
        <script type="text/x-example">
            <button type="button" class="btn btn-sm btn-outline-dark" data-bind-1="this.command,to=paramCommand,source=testObject"
                    data-bind-2="this.commandParam,source={color='Magenta',r=255,g=0,b=255}">
                Color #1
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" data-bind-1="this.command,to=paramCommand,source=testObject"
                    data-bind-2="this.commandParam,source={color='Cornflower',r=100,g=149,b=237}">
                Color #2
            </button>
            <button type="button" class="btn btn-sm btn-outline-dark" data-bind-1="this.command,to=paramCommand,source=testObject"
                    data-bind-2="this.commandParam,source={color='Forest Green',r=34,g=139,b=34}">
                Color #3
            </button>
        </script>
        <button type="button" class="btn btn-sm btn-outline-dark" data-bind-1="this.command,to=paramCommand,source=testObject"
                data-bind-2="this.commandParam,source={color='Magenta',r=255,g=0,b=255}">
            Color #1
        </button>
        <button type="button" class="btn btn-sm btn-outline-dark ml-2" data-bind-1="this.command,to=paramCommand,source=testObject"
                      data-bind-2="this.commandParam,source={color='Cornflower',r=100,g=149,b=237}">
            Color #2
        </button>
        <button type="button" class="btn btn-sm btn-outline-dark ml-2" data-bind-1="this.command,to=paramCommand,source=testObject"
                      data-bind-2="this.commandParam,source={color='Forest Green',r=34,g=139,b=34}">
            Color #3
        </button>
    </div>
    <div class="mb-3">
        <h4 class="text-primary">The source can be an inline object too!</h4>
        <script type="text/x-example">
            <span data-bind="this.value,to=val,source={val='The databound value have been taken from inline object'}"></span>
        </script>
        <div class="text-success" data-bind="this.value,to=val,source={val='The databound value have been taken from inline object'}"></div>
    </div>
    <div class="mb-5">
        <h4 class="text-primary">Binding the source to the <span class="text-danger"><mark>this</mark></span></h4>
        <script type="text/x-example">
            <div data-bind="this.text,to=html,source=this,mode=OneTime"><h3 class="text-success">HTML CONVERTED TO TEXT</h3></div>
        </script>
        <div data-bind="this.text,to=html,source=this,mode=OneTime"><h3 class="text-success">HTML CONVERTED TO TEXT</h3></div>
    </div>
</div>